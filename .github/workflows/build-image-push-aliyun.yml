# .github/workflows/build-arl.yml
name: Build ARL Docker Image

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  clean:
    runs-on: self-hosted

    steps:
      - name: clean running docker
        run: |
          docker stop arl || true
          docker rm arl || true
  build-base:
    runs-on: self-hosted
    needs: clean

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Build Docker image
        run: |
          docker build --platform=linux/amd64 -t risuxx/arl-base-pure:latest .
          docker run --privileged -it -d -p 5003:5003 --name=arl --restart=always risuxx/arl-base-pure:latest /usr/sbin/init
          sleep 30
          docker exec arl bash -c "bash misc/setup-arl.sh"
          docker commit arl risuxx/arl-base:latest
          docker stop arl
          docker rm arl

  build:
    runs-on: self-hosted
    needs: build-base

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          
      - name: Update code file and build docker image
        run: |
          docker build --platform=linux/amd64 -t risuxx/arl:latest -f UpdateDockerfile .
          
  test:
    runs-on: self-hosted
    needs: build

    steps:
      - name: Test Docker image
        run: |
          docker run --name arl-test -d -p 5003:5003 risuxx/arl:latest
          sleep 30
          curl http://localhost:5003 || exit 1
          docker stop arl-test
          docker rm arl-test

  pack:
    runs-on: self-hosted
    needs: test

    steps:
      - name: Pack image file
        run: |
          docker save -o arl.tar risuxx/arl:latest

  deploy:
    runs-on: self-hosted
    needs: pack
    
    steps:
      - name: Push to Aliyun ECS
        env:
          PRIVATE_KEY: ${{ secrets.ALIYUN_ECS_SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.ALIYUN_ECS_HOST }}
          USER: ${{ secrets.ALIYUN_ECS_USER }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          scp -i private_key -o StrictHostKeyChecking=no arl.tar $USER@$HOST:~
          ssh -i private_key -o StrictHostKeyChecking=no $USER@$HOST "docker load -i arl.tar"
          rm -f private_key

      - name: Run ARL image on Aliyun ECS
        env:
          PRIVATE_KEY: ${{ secrets.ALIYUN_ECS_SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.ALIYUN_ECS_HOST }}
          USER: ${{ secrets.ALIYUN_ECS_USER }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -i private_key -o StrictHostKeyChecking=no $USER@$HOST "
            if docker ps -a | grep -q arl; then
              docker stop arl
              docker rm arl
            fi
            docker run -d -p 5003:5003 --name arl --restart always risuxx/arl:latest
          "
          rm -f private_key

